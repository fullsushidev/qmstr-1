// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: reportservice.proto

package service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ReporterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReporterID int32 `protobuf:"varint,1,opt,name=reporterID,proto3" json:"reporterID,omitempty"`
}

func (x *ReporterConfigRequest) Reset() {
	*x = ReporterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reportservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReporterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterConfigRequest) ProtoMessage() {}

func (x *ReporterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reportservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterConfigRequest.ProtoReflect.Descriptor instead.
func (*ReporterConfigRequest) Descriptor() ([]byte, []int) {
	return file_reportservice_proto_rawDescGZIP(), []int{0}
}

func (x *ReporterConfigRequest) GetReporterID() int32 {
	if x != nil {
		return x.ReporterID
	}
	return 0
}

type ReporterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigMap map[string]string `protobuf:"bytes,1,rep,name=configMap,proto3" json:"configMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReporterConfigResponse) Reset() {
	*x = ReporterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reportservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReporterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterConfigResponse) ProtoMessage() {}

func (x *ReporterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reportservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterConfigResponse.ProtoReflect.Descriptor instead.
func (*ReporterConfigResponse) Descriptor() ([]byte, []int) {
	return file_reportservice_proto_rawDescGZIP(), []int{1}
}

func (x *ReporterConfigResponse) GetConfigMap() map[string]string {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

func (x *ReporterConfigResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InfoDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootID   string `protobuf:"bytes,1,opt,name=rootID,proto3" json:"rootID,omitempty"`
	Infotype string `protobuf:"bytes,2,opt,name=infotype,proto3" json:"infotype,omitempty"`
	Datatype string `protobuf:"bytes,3,opt,name=datatype,proto3" json:"datatype,omitempty"`
}

func (x *InfoDataRequest) Reset() {
	*x = InfoDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reportservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoDataRequest) ProtoMessage() {}

func (x *InfoDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reportservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoDataRequest.ProtoReflect.Descriptor instead.
func (*InfoDataRequest) Descriptor() ([]byte, []int) {
	return file_reportservice_proto_rawDescGZIP(), []int{2}
}

func (x *InfoDataRequest) GetRootID() string {
	if x != nil {
		return x.RootID
	}
	return ""
}

func (x *InfoDataRequest) GetInfotype() string {
	if x != nil {
		return x.Infotype
	}
	return ""
}

func (x *InfoDataRequest) GetDatatype() string {
	if x != nil {
		return x.Datatype
	}
	return ""
}

type InfoDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InfoDataResponse) Reset() {
	*x = InfoDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reportservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoDataResponse) ProtoMessage() {}

func (x *InfoDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reportservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoDataResponse.ProtoReflect.Descriptor instead.
func (*InfoDataResponse) Descriptor() ([]byte, []int) {
	return file_reportservice_proto_rawDescGZIP(), []int{3}
}

func (x *InfoDataResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_reportservice_proto protoreflect.FileDescriptor

var file_reportservice_proto_rawDesc = []byte{
	0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x37, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xb9,
	0x02, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x72,
	0x67, 0x2e, 0x71, 0x6d, 0x73, 0x74, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x58, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reportservice_proto_rawDescOnce sync.Once
	file_reportservice_proto_rawDescData = file_reportservice_proto_rawDesc
)

func file_reportservice_proto_rawDescGZIP() []byte {
	file_reportservice_proto_rawDescOnce.Do(func() {
		file_reportservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_reportservice_proto_rawDescData)
	})
	return file_reportservice_proto_rawDescData
}

var file_reportservice_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_reportservice_proto_goTypes = []interface{}{
	(*ReporterConfigRequest)(nil),  // 0: service.ReporterConfigRequest
	(*ReporterConfigResponse)(nil), // 1: service.ReporterConfigResponse
	(*InfoDataRequest)(nil),        // 2: service.InfoDataRequest
	(*InfoDataResponse)(nil),       // 3: service.InfoDataResponse
	nil,                            // 4: service.ReporterConfigResponse.ConfigMapEntry
	(*ProjectNode)(nil),            // 5: service.ProjectNode
	(*FileNode)(nil),               // 6: service.FileNode
}
var file_reportservice_proto_depIdxs = []int32{
	4, // 0: service.ReporterConfigResponse.configMap:type_name -> service.ReporterConfigResponse.ConfigMapEntry
	0, // 1: service.ReportService.GetReporterConfig:input_type -> service.ReporterConfigRequest
	2, // 2: service.ReportService.GetInfoData:input_type -> service.InfoDataRequest
	5, // 3: service.ReportService.GetProjectNode:input_type -> service.ProjectNode
	2, // 4: service.ReportService.GetAllFileNodesMetadata:input_type -> service.InfoDataRequest
	1, // 5: service.ReportService.GetReporterConfig:output_type -> service.ReporterConfigResponse
	3, // 6: service.ReportService.GetInfoData:output_type -> service.InfoDataResponse
	5, // 7: service.ReportService.GetProjectNode:output_type -> service.ProjectNode
	6, // 8: service.ReportService.GetAllFileNodesMetadata:output_type -> service.FileNode
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_reportservice_proto_init() }
func file_reportservice_proto_init() {
	if File_reportservice_proto != nil {
		return
	}
	file_datamodel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_reportservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReporterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reportservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReporterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reportservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reportservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reportservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reportservice_proto_goTypes,
		DependencyIndexes: file_reportservice_proto_depIdxs,
		MessageInfos:      file_reportservice_proto_msgTypes,
	}.Build()
	File_reportservice_proto = out.File
	file_reportservice_proto_rawDesc = nil
	file_reportservice_proto_goTypes = nil
	file_reportservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportServiceClient interface {
	GetReporterConfig(ctx context.Context, in *ReporterConfigRequest, opts ...grpc.CallOption) (*ReporterConfigResponse, error)
	GetInfoData(ctx context.Context, in *InfoDataRequest, opts ...grpc.CallOption) (*InfoDataResponse, error)
	GetProjectNode(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*ProjectNode, error)
	GetAllFileNodesMetadata(ctx context.Context, in *InfoDataRequest, opts ...grpc.CallOption) (ReportService_GetAllFileNodesMetadataClient, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) GetReporterConfig(ctx context.Context, in *ReporterConfigRequest, opts ...grpc.CallOption) (*ReporterConfigResponse, error) {
	out := new(ReporterConfigResponse)
	err := c.cc.Invoke(ctx, "/service.ReportService/GetReporterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetInfoData(ctx context.Context, in *InfoDataRequest, opts ...grpc.CallOption) (*InfoDataResponse, error) {
	out := new(InfoDataResponse)
	err := c.cc.Invoke(ctx, "/service.ReportService/GetInfoData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetProjectNode(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*ProjectNode, error) {
	out := new(ProjectNode)
	err := c.cc.Invoke(ctx, "/service.ReportService/GetProjectNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetAllFileNodesMetadata(ctx context.Context, in *InfoDataRequest, opts ...grpc.CallOption) (ReportService_GetAllFileNodesMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReportService_serviceDesc.Streams[0], "/service.ReportService/GetAllFileNodesMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportServiceGetAllFileNodesMetadataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReportService_GetAllFileNodesMetadataClient interface {
	Recv() (*FileNode, error)
	grpc.ClientStream
}

type reportServiceGetAllFileNodesMetadataClient struct {
	grpc.ClientStream
}

func (x *reportServiceGetAllFileNodesMetadataClient) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReportServiceServer is the server API for ReportService service.
type ReportServiceServer interface {
	GetReporterConfig(context.Context, *ReporterConfigRequest) (*ReporterConfigResponse, error)
	GetInfoData(context.Context, *InfoDataRequest) (*InfoDataResponse, error)
	GetProjectNode(context.Context, *ProjectNode) (*ProjectNode, error)
	GetAllFileNodesMetadata(*InfoDataRequest, ReportService_GetAllFileNodesMetadataServer) error
}

// UnimplementedReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (*UnimplementedReportServiceServer) GetReporterConfig(context.Context, *ReporterConfigRequest) (*ReporterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReporterConfig not implemented")
}
func (*UnimplementedReportServiceServer) GetInfoData(context.Context, *InfoDataRequest) (*InfoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoData not implemented")
}
func (*UnimplementedReportServiceServer) GetProjectNode(context.Context, *ProjectNode) (*ProjectNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectNode not implemented")
}
func (*UnimplementedReportServiceServer) GetAllFileNodesMetadata(*InfoDataRequest, ReportService_GetAllFileNodesMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllFileNodesMetadata not implemented")
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_GetReporterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReporterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetReporterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ReportService/GetReporterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetReporterConfig(ctx, req.(*ReporterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetInfoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetInfoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ReportService/GetInfoData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetInfoData(ctx, req.(*InfoDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetProjectNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetProjectNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ReportService/GetProjectNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetProjectNode(ctx, req.(*ProjectNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetAllFileNodesMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServiceServer).GetAllFileNodesMetadata(m, &reportServiceGetAllFileNodesMetadataServer{stream})
}

type ReportService_GetAllFileNodesMetadataServer interface {
	Send(*FileNode) error
	grpc.ServerStream
}

type reportServiceGetAllFileNodesMetadataServer struct {
	grpc.ServerStream
}

func (x *reportServiceGetAllFileNodesMetadataServer) Send(m *FileNode) error {
	return x.ServerStream.SendMsg(m)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReporterConfig",
			Handler:    _ReportService_GetReporterConfig_Handler,
		},
		{
			MethodName: "GetInfoData",
			Handler:    _ReportService_GetInfoData_Handler,
		},
		{
			MethodName: "GetProjectNode",
			Handler:    _ReportService_GetProjectNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllFileNodesMetadata",
			Handler:       _ReportService_GetAllFileNodesMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reportservice.proto",
}
