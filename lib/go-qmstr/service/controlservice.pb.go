// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: controlservice.proto

package service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{0}
}

func (x *LogMessage) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{1}
}

func (x *LogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type QuitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kill bool `protobuf:"varint,1,opt,name=kill,proto3" json:"kill,omitempty"`
}

func (x *QuitMessage) Reset() {
	*x = QuitMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitMessage) ProtoMessage() {}

func (x *QuitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitMessage.ProtoReflect.Descriptor instead.
func (*QuitMessage) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{2}
}

func (x *QuitMessage) GetKill() bool {
	if x != nil {
		return x.Kill
	}
	return false
}

type QuitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *QuitResponse) Reset() {
	*x = QuitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitResponse) ProtoMessage() {}

func (x *QuitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitResponse.ProtoReflect.Descriptor instead.
func (*QuitResponse) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{3}
}

func (x *QuitResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SwitchPhaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=service.Phase" json:"phase,omitempty"`
}

func (x *SwitchPhaseMessage) Reset() {
	*x = SwitchPhaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchPhaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchPhaseMessage) ProtoMessage() {}

func (x *SwitchPhaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchPhaseMessage.ProtoReflect.Descriptor instead.
func (*SwitchPhaseMessage) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{4}
}

func (x *SwitchPhaseMessage) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_INIT
}

type SwitchPhaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SwitchPhaseResponse) Reset() {
	*x = SwitchPhaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchPhaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchPhaseResponse) ProtoMessage() {}

func (x *SwitchPhaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchPhaseResponse.ProtoReflect.Descriptor instead.
func (*SwitchPhaseResponse) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{5}
}

func (x *SwitchPhaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SwitchPhaseResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetFileNodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNode   *FileNode `protobuf:"bytes,1,opt,name=fileNode,proto3" json:"fileNode,omitempty"`
	UniqueNode bool      `protobuf:"varint,2,opt,name=uniqueNode,proto3" json:"uniqueNode,omitempty"`
}

func (x *GetFileNodeMessage) Reset() {
	*x = GetFileNodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileNodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileNodeMessage) ProtoMessage() {}

func (x *GetFileNodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileNodeMessage.ProtoReflect.Descriptor instead.
func (*GetFileNodeMessage) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{6}
}

func (x *GetFileNodeMessage) GetFileNode() *FileNode {
	if x != nil {
		return x.FileNode
	}
	return nil
}

func (x *GetFileNodeMessage) GetUniqueNode() bool {
	if x != nil {
		return x.UniqueNode
	}
	return false
}

type StatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase  bool `protobuf:"varint,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Switch bool `protobuf:"varint,2,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *StatusMessage) Reset() {
	*x = StatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage) ProtoMessage() {}

func (x *StatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage.ProtoReflect.Descriptor instead.
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{7}
}

func (x *StatusMessage) GetPhase() bool {
	if x != nil {
		return x.Phase
	}
	return false
}

func (x *StatusMessage) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase          string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	PhaseID        Phase  `protobuf:"varint,2,opt,name=phaseID,proto3,enum=service.Phase" json:"phaseID,omitempty"`
	Switching      bool   `protobuf:"varint,3,opt,name=switching,proto3" json:"switching,omitempty"`
	Error          string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	PendingInserts uint64 `protobuf:"varint,5,opt,name=pendingInserts,proto3" json:"pendingInserts,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{8}
}

func (x *StatusResponse) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *StatusResponse) GetPhaseID() Phase {
	if x != nil {
		return x.PhaseID
	}
	return Phase_INIT
}

func (x *StatusResponse) GetSwitching() bool {
	if x != nil {
		return x.Switching
	}
	return false
}

func (x *StatusResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *StatusResponse) GetPendingInserts() uint64 {
	if x != nil {
		return x.PendingInserts
	}
	return 0
}

type EventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class EventClass `protobuf:"varint,1,opt,name=class,proto3,enum=service.EventClass" json:"class,omitempty"`
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{9}
}

func (x *EventMessage) GetClass() EventClass {
	if x != nil {
		return x.Class
	}
	return EventClass_ALL
}

type ExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wait bool `protobuf:"varint,1,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *ExportRequest) Reset() {
	*x = ExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRequest) ProtoMessage() {}

func (x *ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRequest.ProtoReflect.Descriptor instead.
func (*ExportRequest) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{10}
}

func (x *ExportRequest) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

type ExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ExportResponse) Reset() {
	*x = ExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controlservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportResponse) ProtoMessage() {}

func (x *ExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controlservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportResponse.ProtoReflect.Descriptor instead.
func (*ExportResponse) Descriptor() ([]byte, []int) {
	return file_controlservice_proto_rawDescGZIP(), []int{11}
}

func (x *ExportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_controlservice_proto protoreflect.FileDescriptor

var file_controlservice_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x27, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x51, 0x75, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x28, 0x0a, 0x0c,
	0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x3d,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0xac, 0x01,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x22, 0x2a, 0x0a, 0x0e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x99, 0x05, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x1a,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x43, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x71, 0x6d, 0x73, 0x74,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x58, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controlservice_proto_rawDescOnce sync.Once
	file_controlservice_proto_rawDescData = file_controlservice_proto_rawDesc
)

func file_controlservice_proto_rawDescGZIP() []byte {
	file_controlservice_proto_rawDescOnce.Do(func() {
		file_controlservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_controlservice_proto_rawDescData)
	})
	return file_controlservice_proto_rawDescData
}

var file_controlservice_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_controlservice_proto_goTypes = []interface{}{
	(*LogMessage)(nil),          // 0: service.LogMessage
	(*LogResponse)(nil),         // 1: service.LogResponse
	(*QuitMessage)(nil),         // 2: service.QuitMessage
	(*QuitResponse)(nil),        // 3: service.QuitResponse
	(*SwitchPhaseMessage)(nil),  // 4: service.SwitchPhaseMessage
	(*SwitchPhaseResponse)(nil), // 5: service.SwitchPhaseResponse
	(*GetFileNodeMessage)(nil),  // 6: service.GetFileNodeMessage
	(*StatusMessage)(nil),       // 7: service.StatusMessage
	(*StatusResponse)(nil),      // 8: service.StatusResponse
	(*EventMessage)(nil),        // 9: service.EventMessage
	(*ExportRequest)(nil),       // 10: service.ExportRequest
	(*ExportResponse)(nil),      // 11: service.ExportResponse
	(Phase)(0),                  // 12: service.Phase
	(*FileNode)(nil),            // 13: service.FileNode
	(EventClass)(0),             // 14: service.EventClass
	(*PackageNode)(nil),         // 15: service.PackageNode
	(*DiagnosticNode)(nil),      // 16: service.DiagnosticNode
	(*Event)(nil),               // 17: service.Event
}
var file_controlservice_proto_depIdxs = []int32{
	12, // 0: service.SwitchPhaseMessage.phase:type_name -> service.Phase
	13, // 1: service.GetFileNodeMessage.fileNode:type_name -> service.FileNode
	12, // 2: service.StatusResponse.phaseID:type_name -> service.Phase
	14, // 3: service.EventMessage.class:type_name -> service.EventClass
	0,  // 4: service.ControlService.Log:input_type -> service.LogMessage
	2,  // 5: service.ControlService.Quit:input_type -> service.QuitMessage
	4,  // 6: service.ControlService.SwitchPhase:input_type -> service.SwitchPhaseMessage
	15, // 7: service.ControlService.GetPackageNode:input_type -> service.PackageNode
	15, // 8: service.ControlService.GetPackageTargets:input_type -> service.PackageNode
	6,  // 9: service.ControlService.GetFileNode:input_type -> service.GetFileNodeMessage
	16, // 10: service.ControlService.GetDiagnosticNode:input_type -> service.DiagnosticNode
	7,  // 11: service.ControlService.Status:input_type -> service.StatusMessage
	9,  // 12: service.ControlService.SubscribeEvents:input_type -> service.EventMessage
	10, // 13: service.ControlService.ExportSnapshot:input_type -> service.ExportRequest
	1,  // 14: service.ControlService.Log:output_type -> service.LogResponse
	3,  // 15: service.ControlService.Quit:output_type -> service.QuitResponse
	5,  // 16: service.ControlService.SwitchPhase:output_type -> service.SwitchPhaseResponse
	15, // 17: service.ControlService.GetPackageNode:output_type -> service.PackageNode
	13, // 18: service.ControlService.GetPackageTargets:output_type -> service.FileNode
	13, // 19: service.ControlService.GetFileNode:output_type -> service.FileNode
	16, // 20: service.ControlService.GetDiagnosticNode:output_type -> service.DiagnosticNode
	8,  // 21: service.ControlService.Status:output_type -> service.StatusResponse
	17, // 22: service.ControlService.SubscribeEvents:output_type -> service.Event
	11, // 23: service.ControlService.ExportSnapshot:output_type -> service.ExportResponse
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_controlservice_proto_init() }
func file_controlservice_proto_init() {
	if File_controlservice_proto != nil {
		return
	}
	file_datamodel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controlservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchPhaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchPhaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileNodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controlservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controlservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controlservice_proto_goTypes,
		DependencyIndexes: file_controlservice_proto_depIdxs,
		MessageInfos:      file_controlservice_proto_msgTypes,
	}.Build()
	File_controlservice_proto = out.File
	file_controlservice_proto_rawDesc = nil
	file_controlservice_proto_goTypes = nil
	file_controlservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlServiceClient interface {
	Log(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error)
	Quit(ctx context.Context, in *QuitMessage, opts ...grpc.CallOption) (*QuitResponse, error)
	SwitchPhase(ctx context.Context, in *SwitchPhaseMessage, opts ...grpc.CallOption) (*SwitchPhaseResponse, error)
	GetPackageNode(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (ControlService_GetPackageNodeClient, error)
	GetPackageTargets(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (ControlService_GetPackageTargetsClient, error)
	GetFileNode(ctx context.Context, in *GetFileNodeMessage, opts ...grpc.CallOption) (ControlService_GetFileNodeClient, error)
	GetDiagnosticNode(ctx context.Context, in *DiagnosticNode, opts ...grpc.CallOption) (ControlService_GetDiagnosticNodeClient, error)
	Status(ctx context.Context, in *StatusMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	SubscribeEvents(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (ControlService_SubscribeEventsClient, error)
	ExportSnapshot(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type controlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlServiceClient(cc grpc.ClientConnInterface) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) Log(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/service.ControlService/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) Quit(ctx context.Context, in *QuitMessage, opts ...grpc.CallOption) (*QuitResponse, error) {
	out := new(QuitResponse)
	err := c.cc.Invoke(ctx, "/service.ControlService/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) SwitchPhase(ctx context.Context, in *SwitchPhaseMessage, opts ...grpc.CallOption) (*SwitchPhaseResponse, error) {
	out := new(SwitchPhaseResponse)
	err := c.cc.Invoke(ctx, "/service.ControlService/SwitchPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) GetPackageNode(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (ControlService_GetPackageNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlService_serviceDesc.Streams[0], "/service.ControlService/GetPackageNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceGetPackageNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_GetPackageNodeClient interface {
	Recv() (*PackageNode, error)
	grpc.ClientStream
}

type controlServiceGetPackageNodeClient struct {
	grpc.ClientStream
}

func (x *controlServiceGetPackageNodeClient) Recv() (*PackageNode, error) {
	m := new(PackageNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) GetPackageTargets(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (ControlService_GetPackageTargetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlService_serviceDesc.Streams[1], "/service.ControlService/GetPackageTargets", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceGetPackageTargetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_GetPackageTargetsClient interface {
	Recv() (*FileNode, error)
	grpc.ClientStream
}

type controlServiceGetPackageTargetsClient struct {
	grpc.ClientStream
}

func (x *controlServiceGetPackageTargetsClient) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) GetFileNode(ctx context.Context, in *GetFileNodeMessage, opts ...grpc.CallOption) (ControlService_GetFileNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlService_serviceDesc.Streams[2], "/service.ControlService/GetFileNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceGetFileNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_GetFileNodeClient interface {
	Recv() (*FileNode, error)
	grpc.ClientStream
}

type controlServiceGetFileNodeClient struct {
	grpc.ClientStream
}

func (x *controlServiceGetFileNodeClient) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) GetDiagnosticNode(ctx context.Context, in *DiagnosticNode, opts ...grpc.CallOption) (ControlService_GetDiagnosticNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlService_serviceDesc.Streams[3], "/service.ControlService/GetDiagnosticNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceGetDiagnosticNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_GetDiagnosticNodeClient interface {
	Recv() (*DiagnosticNode, error)
	grpc.ClientStream
}

type controlServiceGetDiagnosticNodeClient struct {
	grpc.ClientStream
}

func (x *controlServiceGetDiagnosticNodeClient) Recv() (*DiagnosticNode, error) {
	m := new(DiagnosticNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) Status(ctx context.Context, in *StatusMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/service.ControlService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) SubscribeEvents(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (ControlService_SubscribeEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlService_serviceDesc.Streams[4], "/service.ControlService/SubscribeEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceSubscribeEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_SubscribeEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type controlServiceSubscribeEventsClient struct {
	grpc.ClientStream
}

func (x *controlServiceSubscribeEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) ExportSnapshot(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/service.ControlService/ExportSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServiceServer is the server API for ControlService service.
type ControlServiceServer interface {
	Log(context.Context, *LogMessage) (*LogResponse, error)
	Quit(context.Context, *QuitMessage) (*QuitResponse, error)
	SwitchPhase(context.Context, *SwitchPhaseMessage) (*SwitchPhaseResponse, error)
	GetPackageNode(*PackageNode, ControlService_GetPackageNodeServer) error
	GetPackageTargets(*PackageNode, ControlService_GetPackageTargetsServer) error
	GetFileNode(*GetFileNodeMessage, ControlService_GetFileNodeServer) error
	GetDiagnosticNode(*DiagnosticNode, ControlService_GetDiagnosticNodeServer) error
	Status(context.Context, *StatusMessage) (*StatusResponse, error)
	SubscribeEvents(*EventMessage, ControlService_SubscribeEventsServer) error
	ExportSnapshot(context.Context, *ExportRequest) (*ExportResponse, error)
}

// UnimplementedControlServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControlServiceServer struct {
}

func (*UnimplementedControlServiceServer) Log(context.Context, *LogMessage) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (*UnimplementedControlServiceServer) Quit(context.Context, *QuitMessage) (*QuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (*UnimplementedControlServiceServer) SwitchPhase(context.Context, *SwitchPhaseMessage) (*SwitchPhaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchPhase not implemented")
}
func (*UnimplementedControlServiceServer) GetPackageNode(*PackageNode, ControlService_GetPackageNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPackageNode not implemented")
}
func (*UnimplementedControlServiceServer) GetPackageTargets(*PackageNode, ControlService_GetPackageTargetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPackageTargets not implemented")
}
func (*UnimplementedControlServiceServer) GetFileNode(*GetFileNodeMessage, ControlService_GetFileNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileNode not implemented")
}
func (*UnimplementedControlServiceServer) GetDiagnosticNode(*DiagnosticNode, ControlService_GetDiagnosticNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDiagnosticNode not implemented")
}
func (*UnimplementedControlServiceServer) Status(context.Context, *StatusMessage) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedControlServiceServer) SubscribeEvents(*EventMessage, ControlService_SubscribeEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (*UnimplementedControlServiceServer) ExportSnapshot(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSnapshot not implemented")
}

func RegisterControlServiceServer(s *grpc.Server, srv ControlServiceServer) {
	s.RegisterService(&_ControlService_serviceDesc, srv)
}

func _ControlService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ControlService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Log(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ControlService/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Quit(ctx, req.(*QuitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_SwitchPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchPhaseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).SwitchPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ControlService/SwitchPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).SwitchPhase(ctx, req.(*SwitchPhaseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_GetPackageNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PackageNode)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetPackageNode(m, &controlServiceGetPackageNodeServer{stream})
}

type ControlService_GetPackageNodeServer interface {
	Send(*PackageNode) error
	grpc.ServerStream
}

type controlServiceGetPackageNodeServer struct {
	grpc.ServerStream
}

func (x *controlServiceGetPackageNodeServer) Send(m *PackageNode) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlService_GetPackageTargets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PackageNode)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetPackageTargets(m, &controlServiceGetPackageTargetsServer{stream})
}

type ControlService_GetPackageTargetsServer interface {
	Send(*FileNode) error
	grpc.ServerStream
}

type controlServiceGetPackageTargetsServer struct {
	grpc.ServerStream
}

func (x *controlServiceGetPackageTargetsServer) Send(m *FileNode) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlService_GetFileNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileNodeMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetFileNode(m, &controlServiceGetFileNodeServer{stream})
}

type ControlService_GetFileNodeServer interface {
	Send(*FileNode) error
	grpc.ServerStream
}

type controlServiceGetFileNodeServer struct {
	grpc.ServerStream
}

func (x *controlServiceGetFileNodeServer) Send(m *FileNode) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlService_GetDiagnosticNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiagnosticNode)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).GetDiagnosticNode(m, &controlServiceGetDiagnosticNodeServer{stream})
}

type ControlService_GetDiagnosticNodeServer interface {
	Send(*DiagnosticNode) error
	grpc.ServerStream
}

type controlServiceGetDiagnosticNodeServer struct {
	grpc.ServerStream
}

func (x *controlServiceGetDiagnosticNodeServer) Send(m *DiagnosticNode) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ControlService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Status(ctx, req.(*StatusMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).SubscribeEvents(m, &controlServiceSubscribeEventsServer{stream})
}

type ControlService_SubscribeEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type controlServiceSubscribeEventsServer struct {
	grpc.ServerStream
}

func (x *controlServiceSubscribeEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlService_ExportSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).ExportSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ControlService/ExportSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).ExportSnapshot(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _ControlService_Log_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _ControlService_Quit_Handler,
		},
		{
			MethodName: "SwitchPhase",
			Handler:    _ControlService_SwitchPhase_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ControlService_Status_Handler,
		},
		{
			MethodName: "ExportSnapshot",
			Handler:    _ControlService_ExportSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPackageNode",
			Handler:       _ControlService_GetPackageNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPackageTargets",
			Handler:       _ControlService_GetPackageTargets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFileNode",
			Handler:       _ControlService_GetFileNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDiagnosticNode",
			Handler:       _ControlService_GetDiagnosticNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeEvents",
			Handler:       _ControlService_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controlservice.proto",
}
