// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: analyzerservice.proto

package service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AnalyzerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalyzerID int32 `protobuf:"varint,1,opt,name=analyzerID,proto3" json:"analyzerID,omitempty"`
}

func (x *AnalyzerConfigRequest) Reset() {
	*x = AnalyzerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzerservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzerConfigRequest) ProtoMessage() {}

func (x *AnalyzerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzerservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzerConfigRequest.ProtoReflect.Descriptor instead.
func (*AnalyzerConfigRequest) Descriptor() ([]byte, []int) {
	return file_analyzerservice_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzerConfigRequest) GetAnalyzerID() int32 {
	if x != nil {
		return x.AnalyzerID
	}
	return 0
}

type AnalyzerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigMap map[string]string   `protobuf:"bytes,2,rep,name=configMap,proto3" json:"configMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PathSub   []*PathSubstitution `protobuf:"bytes,3,rep,name=pathSub,proto3" json:"pathSub,omitempty"`
	Token     int64               `protobuf:"varint,4,opt,name=token,proto3" json:"token,omitempty"`
	Name      string              `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AnalyzerConfigResponse) Reset() {
	*x = AnalyzerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzerservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzerConfigResponse) ProtoMessage() {}

func (x *AnalyzerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzerservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzerConfigResponse.ProtoReflect.Descriptor instead.
func (*AnalyzerConfigResponse) Descriptor() ([]byte, []int) {
	return file_analyzerservice_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzerConfigResponse) GetConfigMap() map[string]string {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

func (x *AnalyzerConfigResponse) GetPathSub() []*PathSubstitution {
	if x != nil {
		return x.PathSub
	}
	return nil
}

func (x *AnalyzerConfigResponse) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *AnalyzerConfigResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InfoNodesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     int64       `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Uid       string      `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Infonodes []*InfoNode `protobuf:"bytes,3,rep,name=infonodes,proto3" json:"infonodes,omitempty"`
}

func (x *InfoNodesMessage) Reset() {
	*x = InfoNodesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzerservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoNodesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoNodesMessage) ProtoMessage() {}

func (x *InfoNodesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_analyzerservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoNodesMessage.ProtoReflect.Descriptor instead.
func (*InfoNodesMessage) Descriptor() ([]byte, []int) {
	return file_analyzerservice_proto_rawDescGZIP(), []int{2}
}

func (x *InfoNodesMessage) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *InfoNodesMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InfoNodesMessage) GetInfonodes() []*InfoNode {
	if x != nil {
		return x.Infonodes
	}
	return nil
}

type DiagnosticNodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          int64           `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Uid            string          `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Diagnosticnode *DiagnosticNode `protobuf:"bytes,3,opt,name=diagnosticnode,proto3" json:"diagnosticnode,omitempty"`
}

func (x *DiagnosticNodeMessage) Reset() {
	*x = DiagnosticNodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzerservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticNodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticNodeMessage) ProtoMessage() {}

func (x *DiagnosticNodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_analyzerservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticNodeMessage.ProtoReflect.Descriptor instead.
func (*DiagnosticNodeMessage) Descriptor() ([]byte, []int) {
	return file_analyzerservice_proto_rawDescGZIP(), []int{3}
}

func (x *DiagnosticNodeMessage) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *DiagnosticNodeMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DiagnosticNodeMessage) GetDiagnosticnode() *DiagnosticNode {
	if x != nil {
		return x.Diagnosticnode
	}
	return nil
}

type SendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzerservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analyzerservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_analyzerservice_proto_rawDescGZIP(), []int{4}
}

func (x *SendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DummyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DummyRequest) Reset() {
	*x = DummyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzerservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyRequest) ProtoMessage() {}

func (x *DummyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analyzerservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyRequest.ProtoReflect.Descriptor instead.
func (*DummyRequest) Descriptor() ([]byte, []int) {
	return file_analyzerservice_proto_rawDescGZIP(), []int{5}
}

var File_analyzerservice_proto protoreflect.FileDescriptor

var file_analyzerservice_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x37, 0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x49, 0x44, 0x22, 0x83, 0x02, 0x0a, 0x16, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x75, 0x62, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x75, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x6b, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09,
	0x69, 0x6e, 0x66, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x80, 0x01,
	0x0a, 0x15, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0x28, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x75,
	0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xc5, 0x02, 0x0a, 0x0f, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x4f, 0x0a,
	0x12, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x42,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x71, 0x6d, 0x73, 0x74, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x58, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analyzerservice_proto_rawDescOnce sync.Once
	file_analyzerservice_proto_rawDescData = file_analyzerservice_proto_rawDesc
)

func file_analyzerservice_proto_rawDescGZIP() []byte {
	file_analyzerservice_proto_rawDescOnce.Do(func() {
		file_analyzerservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_analyzerservice_proto_rawDescData)
	})
	return file_analyzerservice_proto_rawDescData
}

var file_analyzerservice_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_analyzerservice_proto_goTypes = []interface{}{
	(*AnalyzerConfigRequest)(nil),  // 0: service.AnalyzerConfigRequest
	(*AnalyzerConfigResponse)(nil), // 1: service.AnalyzerConfigResponse
	(*InfoNodesMessage)(nil),       // 2: service.InfoNodesMessage
	(*DiagnosticNodeMessage)(nil),  // 3: service.DiagnosticNodeMessage
	(*SendResponse)(nil),           // 4: service.SendResponse
	(*DummyRequest)(nil),           // 5: service.DummyRequest
	nil,                            // 6: service.AnalyzerConfigResponse.ConfigMapEntry
	(*PathSubstitution)(nil),       // 7: service.PathSubstitution
	(*InfoNode)(nil),               // 8: service.InfoNode
	(*DiagnosticNode)(nil),         // 9: service.DiagnosticNode
	(*FileNode)(nil),               // 10: service.FileNode
}
var file_analyzerservice_proto_depIdxs = []int32{
	6,  // 0: service.AnalyzerConfigResponse.configMap:type_name -> service.AnalyzerConfigResponse.ConfigMapEntry
	7,  // 1: service.AnalyzerConfigResponse.pathSub:type_name -> service.PathSubstitution
	8,  // 2: service.InfoNodesMessage.infonodes:type_name -> service.InfoNode
	9,  // 3: service.DiagnosticNodeMessage.diagnosticnode:type_name -> service.DiagnosticNode
	0,  // 4: service.AnalysisService.GetAnalyzerConfig:input_type -> service.AnalyzerConfigRequest
	2,  // 5: service.AnalysisService.SendInfoNodes:input_type -> service.InfoNodesMessage
	3,  // 6: service.AnalysisService.SendDiagnosticNode:input_type -> service.DiagnosticNodeMessage
	5,  // 7: service.AnalysisService.GetSourceFileNodes:input_type -> service.DummyRequest
	1,  // 8: service.AnalysisService.GetAnalyzerConfig:output_type -> service.AnalyzerConfigResponse
	4,  // 9: service.AnalysisService.SendInfoNodes:output_type -> service.SendResponse
	4,  // 10: service.AnalysisService.SendDiagnosticNode:output_type -> service.SendResponse
	10, // 11: service.AnalysisService.GetSourceFileNodes:output_type -> service.FileNode
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_analyzerservice_proto_init() }
func file_analyzerservice_proto_init() {
	if File_analyzerservice_proto != nil {
		return
	}
	file_datamodel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_analyzerservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzerservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzerservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoNodesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzerservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticNodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzerservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzerservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analyzerservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analyzerservice_proto_goTypes,
		DependencyIndexes: file_analyzerservice_proto_depIdxs,
		MessageInfos:      file_analyzerservice_proto_msgTypes,
	}.Build()
	File_analyzerservice_proto = out.File
	file_analyzerservice_proto_rawDesc = nil
	file_analyzerservice_proto_goTypes = nil
	file_analyzerservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnalysisServiceClient is the client API for AnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalysisServiceClient interface {
	GetAnalyzerConfig(ctx context.Context, in *AnalyzerConfigRequest, opts ...grpc.CallOption) (*AnalyzerConfigResponse, error)
	SendInfoNodes(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendInfoNodesClient, error)
	SendDiagnosticNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendDiagnosticNodeClient, error)
	GetSourceFileNodes(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (AnalysisService_GetSourceFileNodesClient, error)
}

type analysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisServiceClient(cc grpc.ClientConnInterface) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) GetAnalyzerConfig(ctx context.Context, in *AnalyzerConfigRequest, opts ...grpc.CallOption) (*AnalyzerConfigResponse, error) {
	out := new(AnalyzerConfigResponse)
	err := c.cc.Invoke(ctx, "/service.AnalysisService/GetAnalyzerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) SendInfoNodes(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendInfoNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[0], "/service.AnalysisService/SendInfoNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendInfoNodesClient{stream}
	return x, nil
}

type AnalysisService_SendInfoNodesClient interface {
	Send(*InfoNodesMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendInfoNodesClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendInfoNodesClient) Send(m *InfoNodesMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendInfoNodesClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) SendDiagnosticNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendDiagnosticNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[1], "/service.AnalysisService/SendDiagnosticNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendDiagnosticNodeClient{stream}
	return x, nil
}

type AnalysisService_SendDiagnosticNodeClient interface {
	Send(*DiagnosticNodeMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendDiagnosticNodeClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendDiagnosticNodeClient) Send(m *DiagnosticNodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendDiagnosticNodeClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) GetSourceFileNodes(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (AnalysisService_GetSourceFileNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[2], "/service.AnalysisService/GetSourceFileNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceGetSourceFileNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalysisService_GetSourceFileNodesClient interface {
	Recv() (*FileNode, error)
	grpc.ClientStream
}

type analysisServiceGetSourceFileNodesClient struct {
	grpc.ClientStream
}

func (x *analysisServiceGetSourceFileNodesClient) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalysisServiceServer is the server API for AnalysisService service.
type AnalysisServiceServer interface {
	GetAnalyzerConfig(context.Context, *AnalyzerConfigRequest) (*AnalyzerConfigResponse, error)
	SendInfoNodes(AnalysisService_SendInfoNodesServer) error
	SendDiagnosticNode(AnalysisService_SendDiagnosticNodeServer) error
	GetSourceFileNodes(*DummyRequest, AnalysisService_GetSourceFileNodesServer) error
}

// UnimplementedAnalysisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnalysisServiceServer struct {
}

func (*UnimplementedAnalysisServiceServer) GetAnalyzerConfig(context.Context, *AnalyzerConfigRequest) (*AnalyzerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyzerConfig not implemented")
}
func (*UnimplementedAnalysisServiceServer) SendInfoNodes(AnalysisService_SendInfoNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendInfoNodes not implemented")
}
func (*UnimplementedAnalysisServiceServer) SendDiagnosticNode(AnalysisService_SendDiagnosticNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method SendDiagnosticNode not implemented")
}
func (*UnimplementedAnalysisServiceServer) GetSourceFileNodes(*DummyRequest, AnalysisService_GetSourceFileNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSourceFileNodes not implemented")
}

func RegisterAnalysisServiceServer(s *grpc.Server, srv AnalysisServiceServer) {
	s.RegisterService(&_AnalysisService_serviceDesc, srv)
}

func _AnalysisService_GetAnalyzerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).GetAnalyzerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AnalysisService/GetAnalyzerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).GetAnalyzerConfig(ctx, req.(*AnalyzerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_SendInfoNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendInfoNodes(&analysisServiceSendInfoNodesServer{stream})
}

type AnalysisService_SendInfoNodesServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*InfoNodesMessage, error)
	grpc.ServerStream
}

type analysisServiceSendInfoNodesServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendInfoNodesServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendInfoNodesServer) Recv() (*InfoNodesMessage, error) {
	m := new(InfoNodesMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnalysisService_SendDiagnosticNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendDiagnosticNode(&analysisServiceSendDiagnosticNodeServer{stream})
}

type AnalysisService_SendDiagnosticNodeServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*DiagnosticNodeMessage, error)
	grpc.ServerStream
}

type analysisServiceSendDiagnosticNodeServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendDiagnosticNodeServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendDiagnosticNodeServer) Recv() (*DiagnosticNodeMessage, error) {
	m := new(DiagnosticNodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnalysisService_GetSourceFileNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DummyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalysisServiceServer).GetSourceFileNodes(m, &analysisServiceGetSourceFileNodesServer{stream})
}

type AnalysisService_GetSourceFileNodesServer interface {
	Send(*FileNode) error
	grpc.ServerStream
}

type analysisServiceGetSourceFileNodesServer struct {
	grpc.ServerStream
}

func (x *analysisServiceGetSourceFileNodesServer) Send(m *FileNode) error {
	return x.ServerStream.SendMsg(m)
}

var _AnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnalyzerConfig",
			Handler:    _AnalysisService_GetAnalyzerConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendInfoNodes",
			Handler:       _AnalysisService_SendInfoNodes_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendDiagnosticNode",
			Handler:       _AnalysisService_SendDiagnosticNode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSourceFileNodes",
			Handler:       _AnalysisService_GetSourceFileNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "analyzerservice.proto",
}
